
1) Array methods in detail

1. pop
2. shift
3. push
4. unshift
5. splice
6. slice



1. output of the following array methods



NOTE : shift() and pop() will not accept any parameter. If we pass the paramater, then that's of no use. it simply do the same operation of what it does when we gave with no parameter


// shift

1)
  let arr = [1,2,3,4,5]
  let a = arr.shift();
  console.log(a);      // 1     --> returns removed item
  console.log(arr);    // [ 2, 3, 4, 5 ]

2)
  let arr = [1,2,3,4,5]
  let a = arr.shift(4,3);
  console.log(a);      // 1     --> returns removed item
  console.log(arr);    // [ 2, 3, 4, 5 ]



// pop

1)
  let arr = [1,2,3,4,5]
  let a = arr.pop();
  console.log(a);     // 5     --> returns removed item
  console.log(arr);   // [1, 2, 3, 4]

2)
  let arr = [1,2,3,4,5]
  let a = arr.pop(4,3);
  console.log(a);     // 5     --> returns removed item
  console.log(arr);  // [1, 2, 3, 4]




// push

1)
  let arr = [1,2,3,4,5]
  let a = arr.push();
  console.log(a);     // 5     --->  5 here refers to the length of the array
  console.log(arr);   // [1, 2, 3, 4, 5]

2)
  let arr = [1, 2];
  let a = arr.push(3, 4);
  console.log(a);     // 4 (new length)
  console.log(arr);   // [1, 2, 3, 4]





// unshift

1)
  let arr = [1,2,3,4,5];
  let a = arr.unshift();
  console.log(a);      // 5     --->  5 here refers to the length of the array
  console.log(arr);    // [1, 2, 3, 4, 5]


2)
  let arr = [1, 2, 3];
  let a = arr.unshift(0); // adds 0 to the front
  console.log(a);         // 4
  console.log(arr);       // [0, 1, 2, 3]





// slice

1) 
  let arr = [1,2,3,4,5]
  let a = arr.slice() 
  console.log(a)  // [1,2,3,4,5]
  console.log(arr) // [1,2,3,4,5]


2) 
  let arr = [1,2,3,4,5]
  let a = arr.slice(2) 
  console.log(a)  // [3,4,5]
  console.log(arr) // [1,2,3,4,5]


3)
  let arr = [1,2,3,4,5]
  let a = arr.slice(1,3) 
  console.log(a)  // [2,3]
  console.log(arr) // [1,2,3,4,5]





// splice

1) 
  let arr = [1,2,3,4,5]
  let a = arr.splice() 
  console.log(a)  // []
  console.log(arr) // [1,2,3,4,5]


2)
  let arr = [1,2,3,4,5]
  let a = arr.splice(2) 
  console.log(a)  // [3,4,5]
  console.log(arr) // [1,2]


3)
  let arr = [1,2,3,4,5]
  let a = arr.splice(1,3) 
  console.log(a)  // [2,3,4]
  console.log(arr) // [1,5]

4)
  let arr = [1,2,3,4,5]
  let a = arr.splice(1,3,7,8) 
  console.log(a)  // [2,3,4]
  console.log(arr) // [1,7,8,5]






// findIndex

  const arr = [1,2,3,4,5];
  let a = arr.findIndex((item)=> item===3 )
  console.log(a)  // 2




// find
        ==>   returns the first element that satisfies the condition


  1)

    const arr = [1,2,3,4,5];
    let a = arr.find((item)=> item===3 )
    console.log(a)  // 3

  2)

  const arr = [1, 2, 3, 4, 5];
  let result = arr.find((item) => item > 3);
  console.log(result); // Output: 4




// NaN


  isNaN("Hi") // true

      it tries to convert the string to number. it is not possible. So it is not a number and hence prints true.


  isNaN("123")      // false → can be converted to number
  isNaN("123abc")   // true → cannot be converted to number
  isNaN(100)        // false
  isNaN(NaN)        // true
  isNaN(console.log(2)) // 2





2) Map, filter, reduce these are the HOF


3) First order and Higher order function


4) how you'll check if anything is array or not. --> isArray()


5) Difference between findIndex and indexOf 

  indexOf() :

    - Used to find the index of a specific value.
    - Only works with primitive values (like numbers, strings).
    - Uses strict equality (===).
    - Cannot use a function or condition.

    const arr = [1, 2, 3, 4, 5];
    console.log(arr.indexOf(3)); // Output: 2
    console.log(arr.indexOf(6)); // Output: -1 (not found)



  findIndex() :

    - Used to find the index based on a condition (callback function).
    - Works for complex conditions.
    - Useful with objects or more flexible logic.


    const arr = [1, 2, 3, 4, 5];
    console.l og(arr.findIndex(item => item > 3)); // Output: 3 (index of 4)


