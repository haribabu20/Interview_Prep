1. How do you create reusable and responsive UI components using Material UI?


- In Material UI, reusable components are created by combining MUI's prebuilt components (like Button, Card, Box, etc.) into custom components that accept props and follow consistent styling.
- To make them responsive, I use the MUI Grid system, the sx prop with responsive values, and breakpoints like xs, sm, md, lg.
- I also use MUI‚Äôs Box component with sx={{ display: { xs: 'none', md: 'block' } }} to control visibility across devices. This helps ensure mobile-first design.
- We often wrap our custom components in a Theme-aware setup so they adapt based on global theme changes, like light/dark modes or typography.

üëá Example: Reusable, Responsive Card Component

import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';

const InfoCard = ({ title, description }) => {
  return (
    <Card sx={{ width: { xs: '100%', sm: '48%', md: '30%' }, p: 2, boxShadow: 3 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          {title}
        </Typography>
        <Typography variant="body2">{description}</Typography>
      </CardContent>
    </Card>
  );
};

export default InfoCard;









‚úÖ Usage Example (Responsive Grid Layout)

import { Grid, Container } from '@mui/material';
import InfoCard from './components/InfoCard';

function Dashboard() {
  return (
    <Container sx={{ mt: 4 }}>
      <Grid container spacing={2}>
        <Grid item xs={12} sm={6} md={4}>
          <InfoCard title="Users" description="Active users: 1,204" />
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <InfoCard title="Revenue" description="Revenue this month: $4,500" />
        </Grid>
        {/* More cards... */}
      </Grid>
    </Container>
  );
}






2. What is Material UI and why would you choose it over other UI libraries?


Material UI (MUI) is a popular open-source React UI library that implements Google‚Äôs Material Design system. It provides pre-built, customizable, and responsive components like Buttons, Cards, Dialogs, and Data Grids that help developers build modern, accessible UIs quickly.


‚úÖ Why I prefer MUI over others:

Component Richness:
It provides a huge collection of ready-to-use components out-of-the-box.
Includes advanced components like DataGrid, DatePickers, and Autocomplete.

Customizability:
Uses a powerful theming system (createTheme) to customize colors, spacing, typography, and more across the app.
Supports Dark Mode and custom breakpoints easily.

Developer Experience:
Strong TypeScript support.
Well-documented and widely adopted.
Great integration with tools like Emotion, Styled Components, and Tailwind (via sx prop).

Responsiveness & Accessibility:
Built-in support for responsive layouts (Grid, Box, Hidden, etc.).
Follows WAI-ARIA guidelines ‚Äî accessibility is mostly handled for you.

Production-Ready:
Battle-tested in real-world apps. Backed by a strong community and regular updates.


<Button variant="contained" color="primary">
  Submit
</Button>
With just this, you get a fully styled, accessible button with elevation, ripple effect, and focus ring ‚Äî no CSS needed.









3. How do you apply custom themes in MUI?

In Material UI, a custom theme simply means:
"You are overriding the default design system to match your app's style ‚Äî like custom colors, fonts, spacings, or dark/light mode."

‚úÖ In interviews, if they ask:
"Custom themes in MUI allow you to globally override or extend the default styling system ‚Äî like setting your own brand colors, fonts, or even customizing components like buttons. One common example is implementing light/dark mode using palette.mode. But we can go beyond that ‚Äî like changing typography, border radius, or default spacing, all via a custom theme using createTheme() and ThemeProvider."


Ex:

In Material UI, the palette.mode (either "light" or "dark") sets the overall color scheme for the application.
On top of that, we can extend the theme by customizing palette.primary and palette.secondary to apply our own brand colors, styles, and variants.
This allows us to combine dark/light mode behavior with our custom visual identity ‚Äî all managed via createTheme().

Handson:

const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#90caf9',  // custom blue for dark mode
    },
    secondary: {
      main: '#f48fb1',  // custom pink for dark mode
    },
  },
  typography: {
    fontFamily: 'Poppins, sans-serif',
  },
});


primary ---> value given for the key called color in components like button
secondary ---> value given for the key called color in components like button

| Prop Value                            | Meaning                                                               |
| ------------------------------------- | --------------------------------------------------------------------- |
| `primary`                             | Uses your theme‚Äôs `palette.primary.main` color                        |
| `secondary`                           | Uses your theme‚Äôs `palette.secondary.main` color                      |
| `inherit`                             | Inherits color from parent (usually for text or icons inside buttons) |
| `error`, `info`, `success`, `warning` | Also supported if defined in theme                                    |










4. How do you override default styles for MUI components?

"We can override MUI styles using the sx prop for inline styles, styled() for reusable styled components, or ThemeProvider with createTheme to globally override component styles via the components field. This gives flexibility to customize at different levels based on design requirements."

In short,

      1. sx       - inline styles
      2. styled() - reusable styled component
      3. themeProvider with createTheme - globally overrides the component styles


Explanations:



sx:

- The sx prop is a shorthand styling prop introduced in Material UI v5.
- It allows you to style a component directly, using CSS-like syntax, right inside the component.
- It's more powerful and flexible than plain inline styles, and works seamlessly with Material UI's theme system.

Think of it like giving style={{}}, but more powerful and theme-aware.

Ex:

<Button sx={{ color: 'white', backgroundColor: 'blue', fontSize: '18px' }}>
  Click Me
</Button>


| Feature                   | `style={{}}` | `sx={{}}`     |
| ------------------------- | ------------ | ------------- |
| Supports theme values     | ‚ùå            | ‚úÖ             |
| Pseudo-classes (`:hover`) | ‚ùå            | ‚úÖ             |
| Media queries             | ‚ùå            | ‚úÖ             |
| Simpler for MUI users     | ‚ùå            | ‚úÖ Recommended |




Styled():

- styled() is a utility function from MUI (and Emotion) that lets you create custom styled components using JavaScript.
- It‚Äôs like writing a CSS class but inside JavaScript, directly tied to a component.

Ex:

  import { styled } from '@mui/material/styles';

  const MyButton = styled(Button)`
    background-color: teal;
    color: white;
    font-size: 18px;

    &:hover {
      background-color: darkcyan;
    }
  `;

Now you can use MyButton like a normal React component:
<MyButton>Click Me</MyButton>



| Feature                  | `styled()`                  | `sx` prop                   |
| ------------------------ | --------------------------- | --------------------------- |
| Reusable components      | ‚úÖ Great for reuse           | ‚ùå Best for one-off styles   |
| Cleaner for large styles | ‚úÖ Yes                       | ‚ùå Can get messy if too long |
| Uses Emotion (CSS-in-JS) | ‚úÖ Yes                       | ‚úÖ Yes                       |
| Access theme             | ‚úÖ Yes (`({ theme }) => {}`) | ‚úÖ Yes                       |



‚ú® When to use styled()?

When you need a custom component with reusable styles.
When the component style is large or complex.
When you want to create a styled wrapper (like a styled div, Box, etc.).






themeProvider with createTheme : 

In Material UI (MUI), ThemeProvider is used to wrap your entire app (or part of it) with a custom theme, and createTheme is used to create that theme.

So you can:
  Set primary/secondary colors
  Enable dark/light mode
  Change typography globally
  Control spacing, shadows, etc.
  Override default styles across the app




Ex:

import { ThemeProvider, createTheme } from '@mui/material/styles';
import { CssBaseline, Button } from '@mui/material';

const theme = createTheme({
  palette: {
    mode: 'dark', // or 'light'
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#e91e63',
    },
  },
  typography: {
    fontFamily: 'Poppins, sans-serif',
    fontSize: 14,
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline /> {/* resets default browser styles for consistency */}
      <Button variant="contained" color="primary">
        My Themed Button
      </Button>
    </ThemeProvider>
  );
}

export default App;



üí° What happens here?
createTheme() generates a custom MUI theme object.

ThemeProvider makes that theme available to all MUI components inside.

All components inside <ThemeProvider> will respect your custom settings (like colors, fonts, spacing).




Important:


üîë Main Keys in createTheme



| Key           | Purpose                                                              |
| ------------- | -------------------------------------------------------------------- |
| `palette`     | Controls colors like primary, secondary, background, text, etc.      |
| `typography`  | Controls fonts, sizes, weights, line-heights, etc.                   |
| `breakpoints` | Handles responsive design with media query breakpoints               |
| `spacing`     | Controls spacing unit (used in padding/margin)                       |
| `components`  | Allows you to customize or override default styles of MUI components |
| `shadows`     | Controls elevation (shadow) of components                            |
| `shape`       | Controls border radius globally                                      |
| `transitions` | Customize animation/easing timings used in MUI components            |
| `zIndex`      | Manages layer stacking (like modals, tooltips, drawers)              |
| `direction`   | Supports `ltr` or `rtl` for language direction                       |
| `mixins`      | Common reusable styles like toolbar height                           |




common properties in palatte:

| Property     | Purpose                                           |
| ------------ | ------------------------------------------------- |
| `mode`       | Theme mode (`light` or `dark`)                    |
| `primary`    | Primary brand color (usually buttons, highlights) |
| `secondary`  | Secondary color (alternative highlights, accents) |
| `error`      | For errors or danger styling (e.g., red)          |
| `warning`    | For caution messages                              |
| `info`       | For information states                            |
| `success`    | For success messages                              |
| `background` | Background color config (`default`, `paper`)      |
| `text`       | Text colors (`primary`, `secondary`, `disabled`)  |
| `divider`    | Divider color                                     |



import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#f50057',
    },
  },
  typography: {
    fontFamily: 'Roboto, Arial',
    h1: { fontSize: '2.5rem' },
    button: { textTransform: 'none' },
  },
  spacing: 8, // 1 spacing unit = 8px
  shape: {
    borderRadius: 12,
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 50,
        },
      },
    },
  },
});




DARK/LIGHT Toggle Effect handson in MUI


const [mode, setMode] = useState('light');

const theme = createTheme({
  palette: {
    mode: mode,
    primary: {
      main: '#1976d2',
    },
  },
});

return (
  <ThemeProvider theme={theme}>
    <CssBaseline />
    <Button onClick={() => setMode((prev) => prev === 'light' ? 'dark' : 'light')}>
      Toggle Theme
    </Button>
  </ThemeProvider>
);


| Concept         | Role                                      |
| --------------- | ----------------------------------------- |
| `createTheme()` | Creates the theme object                  |
| `ThemeProvider` | Injects the theme into MUI component tree |
| `CssBaseline`   | Resets CSS to match theme nicely          |






‚úÖ What is CssBaseline in MUI?

Think of CssBaseline as the "sanitizer" or "reset button" for your page‚Äôs CSS, so all components start from a clean slate.


CssBaseline is a built-in component in MUI that helps to:

‚ú® Normalize and reset the browser's default styles
‚ú® Provide a consistent baseline across all browsers and devices

Every browser (Chrome, Firefox, Safari, etc.) has its own default margin, padding, font styles, etc.
This leads to inconsistent look and layout of components across browsers.
CssBaseline clears those inconsistencies and applies MUI‚Äôs default styles on top.












5. What is the difference between the sx prop and makeStyles?

‚úÖ sx prop (introduced in MUI v5):

  - The sx prop is a shorthand styling solution introduced in MUI v5.
  - It allows you to apply inline styles directly on any MUI component using a JavaScript object.
  - It's theme-aware, meaning you can access theme values (like spacing, colors, breakpoints) easily.

  ‚úÖ Example:
  <Button sx={{ color: 'primary.main', fontWeight: 'bold' }}>Click Me</Button>



‚úÖ makeStyles (from MUI v4 - JSS-based):

- makeStyles is a CSS-in-JS hook approach used in MUI v4, based on JSS (JavaScript Style Sheets).
- You define styles in a separate function and use them via a classes object.

‚úÖ Example:

const useStyles = makeStyles({
  btn: {
    color: 'blue',
    fontWeight: 'bold',
  },
});

function App() {
  const classes = useStyles();
  return <Button className={classes.btn}>Click Me</Button>;
}



| Feature            | `sx` Prop                     | `makeStyles`              |
| ------------------ | ----------------------------- | ------------------------- |
| Introduced in      | MUI v5                        | MUI v4                    |
| Styling method     | Inline JS object (style prop) | Hook-based (CSS-in-JS)    |
| Theme-aware        | ‚úÖ Yes                         | ‚úÖ Yes                     |
| JSS Dependency     | ‚ùå No                          | ‚úÖ Yes (uses JSS engine)   |
| Performance        | Better (for small styles)     | Slightly heavier          |
| Readability        | High for small styles         | Better for complex styles |
| Recommended in v5+ | ‚úÖ Yes                         | ‚ùå No (deprecated for v5+) |







6. How do you implement responsive design in MUI?


Material UI (MUI) provides built-in support for responsive design through:

"MUI makes responsive design simple with its breakpoint system, the sx prop, Grid layout, and theme-aware media queries. I commonly use these to build layouts that adapt across mobile, tablet, and desktop."

  1. Breakpoints System

  MUI follows a standard breakpoint system:

      xs: 0,
      sm: 600px,
      md: 900px,
      lg: 1200px,
      xl: 1536px,

  You can use these breakpoints to apply styles conditionally for different screen sizes.



  2. sx Prop with Breakpoints
You can define responsive values using an object:

  <Box
    sx={{
      fontSize: {
        xs: '1rem',
        sm: '1.2rem',
        md: '1.5rem',
        lg: '2rem',
      },
    }}
  >
    Responsive Text
  </Box>




3. Grid System

MUI‚Äôs <Grid container> and <Grid item> components follow a 12-column responsive layout.

  <Grid container spacing={2}>
    <Grid item xs={12} sm={6}>
      <Box>Left</Box>
    </Grid>
    <Grid item xs={12} sm={6}>
      <Box>Right</Box>
    </Grid>
  </Grid>

This layout stacks on mobile and becomes two columns on tablets and up.






7. Explain the Grid system in MUI.

Material UI provides a powerful and flexible Grid system based on CSS Flexbox and the 12-column layout model, making it easy to build responsive and consistent UIs across screen sizes.


  1. Grid Container vs Grid Item

  <Grid container>: Defines a flex container that wraps Grid items.
  <Grid item>: Represents a single column/grid block inside the container.

  <Grid container>
    <Grid item xs={6}>Left</Grid>
    <Grid item xs={6}>Right</Grid>
  </Grid>




  2. 12-Column Layout

  The total width of a row is divided into 12 units. You assign each item xs, sm, md, lg, or xl props with values from 1‚Äì12.

  For example:
  xs={6} means the item takes 6 columns on extra-small devices, i.e., 50% width.




  3. Responsive Design via Breakpoints

  You can define different widths at different breakpoints:

  <Grid item xs={12} sm={6} md={4}>
    {/* Full width on mobile, half on tablets, 1/3 on desktop */}
  </Grid>




  4. spacing and Gutter Control

  Use the spacing prop on the container to control padding (gap) between columns.
  Values are in multiples of the theme‚Äôs spacing (default 8px):

  <Grid container spacing={2}>
    <Grid item xs={6}>A</Grid>
    <Grid item xs={6}>B</Grid>
  </Grid>

  Here, there will be 16px of spacing between columns.




  5. Direction, JustifyContent, AlignItems

  You can control the layout direction and alignment:

  <Grid container direction="row" justifyContent="center" alignItems="center">




  6. Nested Grids

  You can place a Grid inside another Grid item for complex layouts:

  <Grid container spacing={2}>
    <Grid item xs={6}>
      <Grid container>
        <Grid item xs={6}>Nested 1</Grid>
        <Grid item xs={6}>Nested 2</Grid>
      </Grid>
    </Grid>
  </Grid>



Overall Handson:

  import { Grid, Paper } from '@mui/material';

  export default function GridExample() {
    return (
      <Grid container spacing={2}>
        <Grid item xs={12} sm={6} md={4}>
          <Paper sx={{ p: 2 }}>Box 1</Paper>
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <Paper sx={{ p: 2 }}>Box 2</Paper>
        </Grid>
        <Grid item xs={12} sm={12} md={4}>
          <Paper sx={{ p: 2 }}>Box 3</Paper>
        </Grid>
      </Grid>
    );
  }

üß† Summary for Interview:
"MUI‚Äôs Grid system is based on Flexbox and uses a 12-column layout model. It makes responsive layouts easy by allowing us to define column widths per breakpoint. With props like xs, spacing, and nesting support, it provides powerful layout capabilities for both simple and complex UIs."







8. How do you handle forms in Material UI with validation?


import { useForm } from 'react-hook-form'
import { DevTool } from '@hookform/devtools'
import {
  TextField,
  Button,
  Typography,
  Box,
  Paper,
} from '@mui/material'

type FormValue = {
  username: string
  email: string
  channel: string
}

const BasicForm = () => {
  const form = useForm<FormValue>()
  const { register, control, handleSubmit } = form

  const onSubmit = (data: FormValue) => {
    console.log(data)
  }

  return (
    <Paper elevation={3} sx={{ maxWidth: 400, mx: 'auto', mt: 5, p: 4 }}>
      <Typography variant="h5" gutterBottom>
        Form Validation
      </Typography>

      <Box component="form" onSubmit={handleSubmit(onSubmit)} noValidate sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
        <TextField
          label="Username"
          variant="outlined"
          {...register('username')}
        />

        <TextField
          label="Email"
          type="email"
          variant="outlined"
          {...register('email')}
        />

        <TextField
          label="Channel"
          variant="outlined"
          {...register('channel')}
        />

        <Button variant="contained" type="submit">
          Submit
        </Button>
      </Box>

      <DevTool control={control} />
    </Paper>
  )
}

export default BasicForm

Explanation:

Replaced <input> with <TextField> for better UI and built-in label handling.
Used MUI‚Äôs Box and Paper for spacing and container.
sx prop used for inline styling (gap, margin, padding, etc.)
Typography used for form title.









9. What is the difference between Box and Paper component in MUI?



Great question! In Material UI (MUI), both Box and Paper are layout components, but they serve slightly different purposes and have different built-in features. Here's the clear difference between Box and Paper:


  üî∑ Box (Layout Utility):

  Box is a utility wrapper component that acts like a div.
  It is flexible, meant for layout and spacing using the sx prop.
  Does not have any default styles (no shadow, border, background).
  It's best for applying custom CSS using the sx prop.

  Use Case: For wrapping elements, adding margins, paddings, flex/grid styling, etc.

  Ex:
    <Box sx={{ p: 2, backgroundColor: 'lightgray' }}>
      This is a Box
    </Box>



  üü´ Paper (Surface with Elevation):

  Paper is a component with a default elevation (shadow) and background (background.paper from theme).
  It simulates a physical paper sheet (like a card).
  Used when you want a visually distinct container (e.g., cards, modals, form sections).

  Use Case: For creating cards, form containers, dialog content, etc.

  Ex:
    <Paper elevation={3} sx={{ p: 2 }}>
      This is a Paper
    </Paper>


| Feature        | `Box`                     | `Paper`                           |
| -------------- | ------------------------- | --------------------------------- |
| Default style  | None                      | Background + shadow (`elevation`) |
| Purpose        | Layout & spacing utility  | Surface container (like card)     |
| Custom styling | Very flexible via `sx`    | Can also be styled with `sx`      |
| Common use     | Wrapping, spacing, layout | Cards, modals, elevated sections  |







10. How do you implement dialogs or modals using Material UI?

A Dialog (or modal) in MUI is a popup component used to show important information or capture user input without navigating away from the current screen. It's part of the @mui/material library.

Interview answer:
  In Material UI, I implement dialogs using the <Dialog /> component. It provides a modal structure with built-in support for titles, content, and actions. I typically control its visibility using local component state (useState). For confirmation modals, I use <DialogActions>, and for alerts or forms, I place inputs inside <DialogContent>.

4 important component for Dialog in order:
  <Dialog>
  <DialogTitle>
  <DialogContent>
  <DialogActions>


Handson:

    import React, { useState } from 'react';
    import {
      Dialog, DialogTitle, DialogContent,
      DialogActions, Button, Typography
    } from '@mui/material';

    const SimpleDialog = () => {
      const [open, setOpen] = useState(false);

      const handleOpen = () => setOpen(true);
      const handleClose = () => setOpen(false);

      return (
        <>
          <Button variant="outlined" onClick={handleOpen}>
            Open Dialog
          </Button>

          <Dialog open={open} onClose={handleClose}>
            <DialogTitle>Delete Item</DialogTitle>
            <DialogContent>
              <Typography>Are you sure you want to delete this item?</Typography>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose}>Cancel</Button>
              <Button variant="contained" color="error" onClick={handleClose}>Delete</Button>
            </DialogActions>
          </Dialog>
        </>
      );
    };

    export default SimpleDialog;


| Component       | Purpose                                       |
| --------------- | --------------------------------------------- |
| `Dialog`        | Root wrapper for modal                        |
| `DialogTitle`   | Header/title of the modal                     |
| `DialogContent` | Body of the modal (can hold form, text, etc.) |
| `DialogActions` | Footer with buttons (OK, Cancel, etc.)        |







11. What are some accessibility features MUI provides by default?


Accessibility: "Everyone, including people with disabilities, should be able to use your website easily."
Examples:
Visually impaired people use screen readers
Some users can't use mouse, only keyboard

Qn is, what MUI gives by default to support accessibility !


Interview:
Material UI takes care of many accessibility things automatically ‚Äî like keyboard support, screen reader tags, proper focus, and color contrast. You get accessible UI without writing extra code.



‚úÖ What MUI gives by default to support Accessibility?

1. Keyboard-la use panna mudiyum
Tab, Enter, Esc, arrow keys use panni interact panna mudiyum
Example: Dialog open aagumbodhu focus button-la automatic ah pogum

2. Screen Reader support irukum
MUI automatically adds aria tags (aria-label, aria-expanded, etc.)
So screen readers will read components correctly

3. Correct HTML tag use pannum
Example:
  Button component ‚Üí <button> tag
  Typography variant="h1" ‚Üí <h1> tag
This helps both SEO and screen readers

4. Dialog, Menu la focus trap pannum
Dialog open panna, background clickable illa
Escape press panna close aagum
After closing, focus comes back to previous element

5. Snackbar la role="alert" kudukkum
Screen reader will read the alert message immediately

6. Theme color contrast warning
If your color combinations are hard to see (low contrast), MUI will give warning in console during development.









12. How do you integrate MUI with TailwindCSS (since both are in your resume)?


Yes, I‚Äôve worked with both MUI and TailwindCSS in projects. While both provide UI styling, I‚Äôve selectively used each depending on the need.

  - TailwindCSS is a utility-first CSS framework ‚Äî I used it for layout, spacing, responsiveness, and global styles.
  - MUI gives me access to ready-to-use, accessible components like Dialog, Snackbar, Tooltip, etc.

So I‚Äôve integrated both by styling layout with Tailwind and using MUI components for functionality. I ensure there are no style conflicts and follow best practices to make the integration smooth.


Handson for both tailwind and mui:

  import Button from '@mui/material/Button';

  const MyComponent = () => {
    return (
      <div className="p-6 bg-gray-100 min-h-screen">
        <h1 className="text-2xl font-bold text-center mb-4">Welcome</h1>
        
        <Button variant="contained" color="primary">
          MUI Button
        </Button>
      </div>
    );
  };



| Use TailwindCSS for: | Use MUI for:              |
| -------------------- | ------------------------- |
| Layouts              | Dialogs, Menus, Snackbars |
| Grid/Flexbox         | Inputs, FormControls      |
| Colors/Spacing       | Auto accessibility        |
| Responsive styling   | Theme support             |









13. How do you customize icons using MUI's @mui/icons-material?

- In MUI, I use the @mui/icons-material package to import and render Material Design icons.
- These icons are React components, so I can customize them easily using props like fontSize, color, and by applying styles using sx or className.
- I‚Äôve used icons for buttons, alerts, toolbars, etc., and customized them for size, color, hover effects, and layout.


üß™ Example ‚Äì Basic Customization:

  import DeleteIcon from '@mui/icons-material/Delete';

  const MyComponent = () => {
    return (
      <DeleteIcon fontSize="large" color="error" />
    );
  };


üé® Custom Styling with sx

<DeleteIcon sx={{ fontSize: 40, color: '#1976d2', '&:hover': { color: 'red' } }} />

‚úÖ sx gives full control like CSS-in-JS.




üßë‚Äçüé® Inside a Button

import Button from '@mui/material/Button';
import SendIcon from '@mui/icons-material/Send';

<Button variant="contained" endIcon={<SendIcon />} color="primary">
  Send
</Button>



| Use case         | Example                                       |
| ---------------- | --------------------------------------------- |
| Change icon size | `sx={{ fontSize: 30 }}`                       |
| Change color     | `color="primary"` or `sx={{ color: '#00f' }}` |
| Hover effect     | `sx={{ '&:hover': { color: 'red' } }}`        |
| Inside buttons   | `startIcon` / `endIcon` props                 |
| Add animation    | Combine with `@emotion/react` or keyframes    |














14. Difference between styled() utility vs sx prop.


üü¶ 1. sx Prop (Inline styling - Component level)
  - sx is a shorthand CSS-in-JS styling prop introduced in MUI v5.
  - It allows you to apply styles directly on the component.
  - Ideal for quick, one-off customizations.

<Box sx={{ backgroundColor: 'primary.main', p: 2, borderRadius: 2 }}>
  I‚Äôm styled with sx
</Box>




üü© 2. styled() Utility (Reusable styled component)

  - styled() is used to create a custom styled component.
  - Ideal when you want to reuse styled components with consistent styling.
  - Based on @emotion/styled.


Ex:

import { Box } from '@mui/material';

export default function SxExample() {
  return (
    <Box sx={{ backgroundColor: 'lightblue', padding: '16px', borderRadius: '8px' }}>
      Hello from sx!
    </Box>
  );
}



| Feature     | `sx` Prop                        | `styled()` Utility                |
| ----------- | -------------------------------- | --------------------------------- |
| Scope       | One-off, inline style            | Reusable, component-level styling |
| Reusability | Not reusable                     | Highly reusable                   |
| Theming     | Fully theme-aware                | Fully theme-aware                 |
| Use case    | Quick styling adjustments        | Consistent custom UI components   |
| Overriding  | Easy to override at usage        | Harder to override inline         |
| Readability | Can get messy for complex styles | Cleaner and modular               |






15. How do you use Snackbar and Alert for notifications in MUI?


Snackbar: A small popup notification that shows messages (usually at bottom left or bottom center).

Alert: A component that gives more visual feedback (like success, error, warning messages) and can be placed inside Snackbar.








