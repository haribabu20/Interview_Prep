


Question:

1. What is Tailwind CSS and how is it different from other CSS frameworks like Bootstrap?
2. How do you customize your Tailwind config using tailwind.config.js?
3. How do you conditionally apply Tailwind classes in a React component?
4. How do you handle responsive design in Tailwind?
5. What are @apply and @layer used for in Tailwind?


6. How do you create reusable UI components with Tailwind CSS in a React project?
7. How do you manage dark mode with Tailwind CSS in a React app?
8. How would you structure large Tailwind-based projects for maintainability?
9. How do you create reusable and responsive UI components using Tailwind CSS.









Answer:







1. What is Tailwind CSS and how is it different from other CSS frameworks like Bootstrap?

Tailwind CSS is a utility-first CSS framework, which means it provides low-level utility classes like p-4, text-center, bg-blue-500, and flex that you can directly use in your markup to build custom designs â€” without writing any CSS yourself.


| Feature             | Tailwind CSS                         | Bootstrap                         |
| ------------------- | ------------------------------------ | --------------------------------- |
| **Approach**        | Utility-first                        | Component-based                   |
| **Customization**   | Highly customizable via config       | Limited to predefined components  |
| **Design Freedom**  | Full control over design             | Predefined UI patterns/components |
| **File Size (Raw)** | Smaller, tree-shakable with PurgeCSS | Larger due to unused styles       |
| **Learning Curve**  | Slightly steeper (at first)          | Easier to get started             |
| **CSS Writing**     | Minimal to none                      | Often needs custom CSS            |











2. How do you customize your Tailwind config using tailwind.config.js?

In Tailwind CSS, the tailwind.config.js file is the central place to customize and extend the default design system. You can define your own colors, spacing, breakpoints, fonts, and more â€” which makes your design consistent and reusable across the project.


// tailwind.config.js

  module.exports = {
    content: ['./src/**/*.{js,jsx,ts,tsx}'], // purge unused classes
    theme: {
      extend: {
        colors: {
          primary: '#1e40af',   // Custom primary color
          secondary: '#f59e0b', // Custom secondary color
        },
        spacing: {
          '72': '18rem',
          '84': '21rem',
        },
        fontFamily: {
          custom: ['"Poppins"', 'sans-serif'],
        },
      },
    },
    plugins: [],
  }


Real world usage:
<div className="bg-primary text-white font-custom p-6">
  Customized Tailwind Styles
</div>


Customizing the tailwind.config.js gives you design consistency, removes the need for inline styles or external CSS, and lets you scale your UI efficiently â€” especially in large React projects.








3. How do you conditionally apply Tailwind classes in a React component?


In React, we can conditionally apply Tailwind classes using:

  Template literals (backticks)
  Ternary operators or logical conditions
  clsx or classnames libraries (for better readability)

Ex:

  const isActive = true;

  <button className={`px-4 py-2 rounded ${isActive ? 'bg-blue-600' : 'bg-gray-400'}`}>
    Submit
  </button>








4. How do you handle responsive design in Tailwind?

In Tailwind CSS, we handle responsive design using built-in breakpoint prefixes like sm:, md:, lg:, xl:, and 2xl:. These allow you to apply styles conditionally based on screen width.


ðŸ“± Mobile-First Approach

Tailwind applies styles by default to mobile, and you can scale up using breakpoints.

<div className="bg-red-500 sm:bg-green-500 md:bg-blue-500 lg:bg-yellow-500 xl:bg-purple-500">
  Responsive Box
</div>

Explanation:

  bg-red-500: mobile default
  sm:bg-green-500: â‰¥640px
  md:bg-blue-500: â‰¥768px
  lg:bg-yellow-500: â‰¥1024px
  xl:bg-purple-500: â‰¥1280px




We can customize these things in tailwind.config.js

module.exports = {
  theme: {
    screens: {
      sm: '640px',
      md: '768px',
      lg: '1024px',
      xl: '1280px',
    }
  }
}






5. What are @apply and @layer used for in Tailwind?


Interview ans:

"@apply is used to apply a group of Tailwind utility classes into a custom CSS class. This is useful when we want to reuse the same style in multiple components.

@layer is used to tell Tailwind that the custom class we're defining should be included in a specific layer like components, utilities, or base. It also ensures that these styles are not purged during production build.
If you donâ€™t write @layer, Tailwind might purge (remove) the class in production.

Handson:

    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    @layer base {
      h1 {
        @apply text-3xl font-bold;
      }
      body {
        @apply bg-gray-50 text-gray-900;
      }
    }

    @layer components {
      .btn-primary {
        @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600;
      }

      .card {
        @apply p-6 bg-white shadow-md rounded-lg border border-gray-200;
      }
    }

    @layer utilities {
      .text-shadow {
        text-shadow: 1px 1px 2px rgba(0,0,0,0.25);
      }

      .rotate-y-180 {
        transform: rotateY(180deg);
      }
    }








6. How do you create reusable UI components with Tailwind CSS in a React project?







7. How do you manage dark mode with Tailwind CSS in a React app?







8. How would you structure large Tailwind-based projects for maintainability?








9. How do you create reusable and responsive UI components using Tailwind CSS.




